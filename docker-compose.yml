version: '3'

services:

  # Elasticsearch Service
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
    container_name: ${PROJECT_NAME}_es01
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
#      - certs:/usr/share/elasticsearch/config/certs
      - type: volume
        source: es01
        target: /usr/share/elasticsearch/data
#    ports:
#      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - ELASTIC_PASSWORD=password
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
#      - xpack.security.http.ssl.key=certs/es01/es01.key
#      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
#      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=false
#      - xpack.security.transport.ssl.key=certs/es01/es01.key
#      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
#      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
    mem_limit: 1073741824
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ${PROJECT_NAME}_rabbitmq
    restart: unless-stopped
    tty: true
    ports:
      - "15672:15672"

      # Redis Service
  redis:
    image: redis:5-alpine
    container_name: ${PROJECT_NAME}_redis
    restart: unless-stopped
    tty: true

  # Mail Service
  mailer:
    image: schickling/mailcatcher
    container_name: ${PROJECT_NAME}_mailer
    restart: unless-stopped
    tty: true
    ports:
      - "1080:1080"

  # PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${PROJECT_NAME}/php
    container_name: ${PROJECT_NAME}_app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini


  # PHP 8.1 Service
  php81:
    build:
      context: .
      dockerfile: php81
    image: ${PROJECT_NAME}/php81
    container_name: ${PROJECT_NAME}_php81
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: php81
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini

  # NGINX Service
  web:
    image: nginx:alpine
    container_name: ${PROJECT_NAME}_web
    restart: unless-stopped
    tty: true
    volumes:
      - ./:/var/www
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    ports:
      - "80:80"

  # MYSQL Service
  db:
    image: mysql:8.0
    container_name: ${PROJECT_NAME}_db
    restart: unless-stopped
    tty: true
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - type: volume
        source: db
        target: /var/lib/mysql
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    ports:
      - "3306:3306"
# DOCKER Volumes
volumes:
  db:
    driver: local
  es01:
    driver: local
